什么是JDBC?
    JDBC是操作数据库连接的API、接口
JDBC入门案例？
    实现步骤：
        0.导入jar包
        1.注册驱动
        2.获取数据库连接对象
        3.获取执行sql语句对象
        4.执行sql语句
        5.释放资源

步骤详情：
    0.导入jar包
        为什么要导入jar包，因为操作数据库的实现类和方法都在jar包中存在着，jar包中存放都是一些.class文件
    1.注册驱动
        注册驱动是为了告诉我们使用的是哪一个数据库，并且为后续连接数据库做一些提前的准备工作
        class.forNAME("com.mysql.jdbc.Driver")：将com.mysql.jdbc文件夹下的Driver.class文件从本地磁盘
        加载到方法区中

        注册驱动的真是代码：
            DriverManager.registerDriver(new Driver());

        为什么我们不写真实的的注册驱动代码，而是写另外一个方式呢？
            ①因为如果我们一旦写了真实代码，会造成二次注册
            ②这样写会增加耦合性，太过依赖于jar包的存在
    2.获取数据库连接对象
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/test?characterEncoding
        =utf8&useSSL=false&serverTimezone=UTC&rewriteBatchedStatements=true", "root", "abc123");
        第一个参数：协议+IP+端口号+数据库的名字
        第二个参数：数据库的用户名
        第三个参数：数据库的密码
        注意：如果使用的IP是localhost,数据库端口是3306的话，我们就可以简写为：
            jdbc:mysql://localhost:3306/数据库名 ----> jdbc:mysql:///数据库名
    3.获取执行sql语句对象
        statement stat = conn.createStatement();
        注：这样写会出现sql注入风险(使用问号占位符解决sql注入问题)
    4.执行sql语句
        主要操作数据库无非就是增删改查
            insert into
            update set
            delete from
            select
        常见方法？
            int executeUpdate(String sql):操作数据库的增删改功能
            ResultSet executeQuery(String sql):操作数据库的查询操作
                ResultSet接口中的方法：
                    boolean next():跟迭代器差不多,该方法是获取下一个元素
                    Object getObject(int columnIndex):获取Object类型的结果
                    Object getObject(String columnLabel):
                    int getInt(int columnIndex)
                    *int getInt(String columnLabel):里面传入数据库的字段名-------常用
                    String getString(int columnIndex)
                    *String getString(String columnLabel):里面传入数据库的字段名-------常用
            boolean execute(String sql):操作数据库增删改查操作,增删改返回false,查询返回true

    5.释放资源
        数据库连接对象 Connection
        执行sql语句对象 Statement
        结果集对象 ResultSet